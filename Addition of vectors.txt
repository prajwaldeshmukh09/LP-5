1.Addition of vectors 
#include <iostream> 
using namespace std; 
 
__global__ void add(int* A, int* B, int* C, int size) { 
    int tid = blockIdx.x * blockDim.x + threadIdx.x; 
 
    if (tid < size) 
 { 
        C[tid] = A[tid] + B[tid]; 
    } 
} 
 
void initialize(int* vector, int size) { 
    for (int i = 0; i < size; i++) { 
        vector[i] = rand() % 100; 
    } 
} 
 
void print(int* vector, int size) { 
    for (int i = 0; i < size; i++) { 
        cout << vector[i] << " "; 
    } 
    cout << endl; 
} 
 
int main() { 
    int N = 10; 
    int* A, * B, * C; 
 
    int vectorSize = N; 
    size_t vectorBytes = vectorSize * sizeof(int); 
 
    A = new int[vectorSize]; 
    B = new int[vectorSize]; 
    C = new int[vectorSize]; 
 
    initialize(A, vectorSize); 
    initialize(B, vectorSize); 
 
    cout << "Vector A: "; 
    print(A, N); 
    cout << "Vector B: "; 
    print(B, N); 
 
    int* X, * Y, * Z; 
    cudaMalloc(&X, vectorBytes); 
    cudaMalloc(&Y, vectorBytes); 
    cudaMalloc(&Z, vectorBytes); 
 
cudaMemcpy(X, A, vectorBytes, cudaMemcpyHostToDevice); 
cudaMemcpy(Y, B, vectorBytes, cudaMemcpyHostToDevice); 
int threadsPerBlock = 256; 
int blocksPerGrid = (N + threadsPerBlock - 1) / threadsPerBlock; 
add<<<blocksPerGrid, threadsPerBlock>>>(X, Y, Z, N); 
cudaMemcpy(C, Z, vectorBytes, cudaMemcpyDeviceToHost); 
cout << "Addition: "; 
print(C, N); 
delete[] A; 
delete[] B; 
delete[] C; 
cudaFree(X); 
cudaFree(Y); 
cudaFree(Z); 
return 0; 
} 
Output: 
Vector A: 83 86 77 15 93 35 86 92 49 21  
Vector B: 62 27 90 59 63 26 40 26 72 36  
Addition: 145 113 167 74 156 61 126 118 121 57 
